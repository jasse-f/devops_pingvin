name: Docker Image CI

env:
  IMAGE_NAME: "${{ secrets.DOCKER_JASMIN_USERNAME }}/pingvin_app:latest"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      log_errors:
        description: "Log errors if tests fail"
        required: true
        default: "false"
        type: boolean

jobs:     
  test:
    runs-on: ubuntu-latest
    env:
      API_KEY: "${{ secrets.API_KEY }}"
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Run tests
        run: |
          python -m pytest > test_log.log
          
      - name: Create eventual failed test log
        if: ${{ failure() && github.event.inputs.log_errors == 'true'}}
        uses: actions/upload-artifact@v3
        with:
          name: error-log
          path: test_log.log
        
        
  build-and-publish:
      runs-on: ubuntu-latest
      needs: test
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_JASMIN_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_JASMIN_PASSWORD }}
        IMAGE_NAME: "${{ secrets.DOCKER_JASMIN_USERNAME }}/pingvin_app:latest"
        API_KEY: "${{ secrets.API_KEY }}"
            
      steps:
      - name: checkout repo
        uses: actions/checkout@v4
        
      - name: Create dockerfile
        run: |
          echo -e "FROM python:3.9\nCOPY . /app/\nWORKDIR /app\nRUN pip install -r requirements.txt\nARG API_KEY\nENV API_KEY=$API_KEY\nEXPOSE 8080\nCMD ["python", "app.py"]" > Dockerfile
  
      - name: Build the Docker image
        run: docker build --build-arg API_KEY="${{ secrets.API_KEY }}" -t "$IMAGE_NAME" .
    
      - name: Log in to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        
      - name: Push the Docker image to Docker Hub
        run: docker push "$IMAGE_NAME"
